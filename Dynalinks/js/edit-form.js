/*if not given, then input elements will create by "type" parameterform - DOM node, contains custom form's fieldstype - type of generated input element, one of "select", "text", "label", "custom"'custom' means to use DOM given in 'form' fielddict - data for "select" input, array or dictionary, where key became 'value' attribue of 'option' element, and value became text{option1 value: option1 text,option2 value: option2 text}value - selected item for "select" input elementparams.type = 'select';params.dict = {"1": "one","2": "two"};params.value = "1";value - value by default for text input elementparams.type = 'text';params.value = 'dummy';params.type = 'label';params.value = 'Title text';handler - callback function, call if user click "ok" buttontitle - title of forminput-container - if form generated, then it may give class name or id of DOM element, witch contain input element, optional, default value 'mt-input-container'not_escape - if ture, not escape/sanitize text input. optional. default value false.fields = [	{	type: select,	options : 		{			"one": "1",			"two": "2"		}	value: "1"	"data-value": "tag"	},	{		type: text,		"data-value": "comment"	}]*/var Form_Fabric = {};Form_Fabric.escape_text = function (text){	if (this.not_escape)		return text;	return text.replace(/'|"/g, '&quot;').replace(/</g, '$lt;').replace(/>/g, '$gt;');}Form_Fabric["select"] = function (dict, selected){	var selected_is_defined = !(typeof selected === 'undefined');	var html = '';	if (Array.isArray(dict)){		for (var key = 0, len = dict.length; key < len; key++){				html += '<option value="' + key + '"';			if (selected_is_defined && selected == key) {				html += " selected ";			}			html += '>' + dict[key]+'</option>';		}	}	else {		for (var key in dict) {			if (Object.prototype.hasOwnProperty.call(dict, key)) {				html += '<option value="' + key + '"';				if (selected_is_defined && selected === key) {					html += " selected ";				}				html += '>' + dict[key]+'</option>';			}		}	}	var form = document.createElement('select');	form.innerHTML = html;	return form;} Form_Fabric["text"] = function (value){	var input = document.createElement('input');	input.type = 'text';	if (value) {		input.value = Form_Fabric.escape_text(value || "");	}	return input;}Form_Fabric["label"] = function (value){	var form = document.createElement('div');	form.className = "popup-form-static-text";	form.style["text-align"] = "center";	form.innerHTML = '<h3>' + Form_Fabric.escape_text(value || " ") + '</h3>';	return form;}Form_Fabric["textarea"] = function (value){	var form = document.createElement('textarea');	if (value) {		form.value = Form_Fabric.escape_text(value || "");	}	return form;}Form_Fabric.create = function (type, value, dict){	var f = this[type];	if (!f) {		throw ("Popup_Form can't create form, parameter 'type' is unknown value", type);	}	var form;	if (type === "select") {		form = f(dict, value);	}	else {		form =  f(value);	}	return form;}Form_Fabric.create_fields = function (fields){	var item, input, div;	var form = document.createElement("div");	for(var i = 0; i < fields.length; i++) {		item = fields[i];		input = this.create(item.type, item.value, item.dict);		if ("data-value" in item) {			input.setAttribute("data-value", item["data-value"]);		}		div = document.createElement("div");		div.className = "dummy";		div.appendChild(input);		form.appendChild(div);	}	return form;}function PopupForm(params){	this.dict = params.dict;		this.selected = params.selected; 	this.type = params.type;	this.template = params.template;		this.handler = params.handler;	this.change_text = params.change_text;	this.title = params.title;	this.not_escape = params.not_escape;			this.text = "";	this.result = -1;	var empty = true;		this.initialize = function ()	{		if (!empty) return;				Form_Fabric.not_escape = !!params.not_escape;		if (params.form) {			this.form = params.form;		}		else if (params.fields) {			this.form = Form_Fabric.create_fields(params.fields);		}		else  {			this.form = Form_Fabric.create(params.type, params.value, params.dict);		}		this.create_template(params);				{			var t = this.template.querySelector(".mt-input-container");			if (!t) {				t = document.createElement("div");				t.className = "mt-input-container";				console.log("not found mt-input-container, need create it");				this.template.appendChild(t);			}			else {				t.innerHTML = '';			}			t.appendChild(this.form);			//обработчики кнопок, если они есть...			var self = this;			t = this.template.querySelector(".edit-form-ok-btn");			t.onclick = function (e) {self._ok();}			t = this.template.querySelector(".edit-form-cancel-btn");			t.onclick = function (e) {self.cancel();}		}				this.init();		empty = false;	}	}PopupForm.prototype.make_unique = function (){	if (this.constructor.prototype.onshow) {		this.constructor.prototype.onshow.cancel();	}	this.constructor.prototype.onshow = this;}PopupForm.prototype.close_unique = function () {	this.constructor.prototype.onshow = null;}PopupForm.prototype.onshow = null;PopupForm.prototype.create_template = function (params){	//создать пустышку, если шаблон не задан...	if (!this.template)			{		this.template = document.createElement('div');		this.template.className = 'edit-form-container';		this.template.style["background-color"] = "#FFFFFF";		var html = this.title ? '<h3 class="edit-form-title">' + this.escape_text(this.title) + '</h3>' : '';		html += '<div class="mt-input-container"></div><button class="edit-form-ok-btn">ОК</button><button class="edit-form-cancel-btn">Отмена</button>';		this.template.innerHTML = html;					this.template.style["background_color"] ="#FFFFFF";		this.template.style["padding"] = "5px";		this.template.style["box-shadow"] = "0 0 10px rgba(0,0,0,0.5)"; 	}	this.template.style["position"] = "fixed";}PopupForm.prototype.escape_text = function (text){	return text.replace(/'|"/g, '&quot;').replace(/</, '$lt;').replace(/>/, '$gt;');}PopupForm.prototype.init = function(){	var self = this;		self.template.onkeydown =  function(e)	{		switch(e.keyCode)		{			case 27: self.cancel(); break;			case 13: self._ok(); break;		}	}	}PopupForm.prototype.attach_focus = function(){	var self = this;	self.template.on("blur", function (e)	{		self.cancel();	});}PopupForm.prototype.insert = function (){	//вставляем в нужное место документа	this.template.style["display"] = "block";	document.body.appendChild(this.template);		var w = window.innerWidth / 2 - this.template.offsetWidth/2;	var h = window.innerHeight / 2 - this.template.offsetHeight/2;	this.template.style["left"]	= w + "px";	this.template.style["top"] = h + "px";}PopupForm.prototype.detach = function (){	//отсоединить от документа	this.template.parentNode.removeChild(this.template);}PopupForm.prototype.save_text = function (jquery_obj){	//получить редактируемый текст из документа	//this.text = jquery_obj.text();	//jquery_obj.text("");}PopupForm.prototype.show = function (jquery_obj){	this.initialize();		this.make_unique();		this.jquery_obj = jquery_obj;		if (this.change_text && jquery_obj) {		this.save_text(jquery_obj);	}	this.insert();		this.result = -1;	this.form.focus();}PopupForm.prototype.hide = function(){	this.close_unique();		this.detach();		//вставить новый текст или восстановить старый	if (this.change_text && this.jquery_obj) {		//this.jquery_obj.text(this.text);	}}PopupForm.prototype.cancel = function(){	this.hide();}PopupForm.prototype._get_values_from_inputs = function(data, inputs) {	if (!inputs) 		return;	var key;	for(var i = 0; i < inputs.length; i++) {		if (inputs[i].hasAttribute('data-value')) {			key = inputs[i].getAttribute('data-value');			if (inputs[i].type === "checkbox") {				data[key] = !!inputs[i].checked;			}			else if (inputs[i].type == 'text') {				if (!this.not_escape) {					data[key] = this.escape_text(inputs[i].value);				} else {					data[key] = inputs[i].value;				}			}			else {				data[key] = inputs[i].value;			}		}	}}PopupForm.prototype._get_value = function (){	var value;	if (this.type === 'custom') {		value = {};		this._get_values_from_inputs(value, this.form.querySelectorAll('input'));		this._get_values_from_inputs(value, this.form.querySelectorAll('select'));		this._get_values_from_inputs(value, this.form.querySelectorAll('textarea'));	}	else if (this.type === "select") {		//new_value = this.form.find(":selected").val();		value = this.form.options[this.form.selectedIndex].value;		//var text = e.options[e.selectedIndex].text;	} else if (this.type === "text") {		value = this.form.value;		if (!this.not_escape) {			value = this.escape_text(value);		}	}	else if (this.type === 'textarea') {		value = this.form.value;		if (!this.not_escape) {			value = this.escape_text(value);		}	}	return value;}PopupForm.prototype._ok = function(){	value = this._get_value();	this.hide();		if (this.handler) {		var done = this.handler(value);		if (done)		{			this.result = value;			//выбрать новый текст из словаря, если у нас список значений			this.text = this.dict ? this.dict[value] : value;		}	}}function ModalForm(){	PopupForm.apply(this, arguments);}ModalForm.prototype = Object.create(PopupForm.prototype);ModalForm.prototype.constructor = ModalForm;ModalForm.prototype.onShow = null;ModalForm.prototype.create_template = function (params){	if (!this.template)			{		this.template = $('<form class="modal-edit-form-container">');			var html = "";		if (params.title) {			html = '<div class="mt-edit-title"><i><h3>'+params.title+'</h3></i></div>';		}		html += '<div class="modal-edit-form mt-input-container"></div><div><button class="inplace-edit-ok">ОК</button><button class="inplace-edit-cancel">Отмена</button></div>'		this.template.html(html);				this.template.css({"background-color": "#FFFFFF"});		this.template.css({"padding": "5px"});		this.template.css({"box-shadow":  "0 0 10px rgba(0,0,0,0.5)"}); 	}	this.template.css({"position": "absolute"});}ModalForm.prototype.insert = function (){	$(document.body).append(this.template);		//вставляем по центру экрана	this.template.css({"display": "block"});		    this.template.css({        'position': 'fixed',        'left': '50%',        'top': '50%',    });    this.template.css({        'margin-left': -this.template.outerWidth() / 2 + 'px',        'margin-top': -this.template.outerHeight() / 2 + 'px'    });	}